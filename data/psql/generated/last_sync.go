// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LastSync is an object representing the database table.
type LastSync struct {
	BaseAsset  string    `boil:"base_asset" json:"base_asset" toml:"base_asset" yaml:"base_asset"`
	QuoteAsset string    `boil:"quote_asset" json:"quote_asset" toml:"quote_asset" yaml:"quote_asset"`
	Exchange   string    `boil:"exchange" json:"exchange" toml:"exchange" yaml:"exchange"`
	LastSync   null.Time `boil:"last_sync" json:"last_sync,omitempty" toml:"last_sync" yaml:"last_sync,omitempty"`

	R *lastSyncR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lastSyncL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LastSyncColumns = struct {
	BaseAsset  string
	QuoteAsset string
	Exchange   string
	LastSync   string
}{
	BaseAsset:  "base_asset",
	QuoteAsset: "quote_asset",
	Exchange:   "exchange",
	LastSync:   "last_sync",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var LastSyncWhere = struct {
	BaseAsset  whereHelperstring
	QuoteAsset whereHelperstring
	Exchange   whereHelperstring
	LastSync   whereHelpernull_Time
}{
	BaseAsset:  whereHelperstring{field: "\"last_sync\".\"base_asset\""},
	QuoteAsset: whereHelperstring{field: "\"last_sync\".\"quote_asset\""},
	Exchange:   whereHelperstring{field: "\"last_sync\".\"exchange\""},
	LastSync:   whereHelpernull_Time{field: "\"last_sync\".\"last_sync\""},
}

// LastSyncRels is where relationship names are stored.
var LastSyncRels = struct {
}{}

// lastSyncR is where relationships are stored.
type lastSyncR struct {
}

// NewStruct creates a new relationship struct
func (*lastSyncR) NewStruct() *lastSyncR {
	return &lastSyncR{}
}

// lastSyncL is where Load methods for each relationship are stored.
type lastSyncL struct{}

var (
	lastSyncAllColumns            = []string{"base_asset", "quote_asset", "exchange", "last_sync"}
	lastSyncColumnsWithoutDefault = []string{"base_asset", "quote_asset", "exchange", "last_sync"}
	lastSyncColumnsWithDefault    = []string{}
	lastSyncPrimaryKeyColumns     = []string{"base_asset", "quote_asset", "exchange"}
)

type (
	// LastSyncSlice is an alias for a slice of pointers to LastSync.
	// This should generally be used opposed to []LastSyncTime.
	LastSyncSlice []*LastSync
	// LastSyncHook is the signature for custom LastSync hook methods
	LastSyncHook func(context.Context, boil.ContextExecutor, *LastSync) error

	lastSyncQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lastSyncType                 = reflect.TypeOf(&LastSync{})
	lastSyncMapping              = queries.MakeStructMapping(lastSyncType)
	lastSyncPrimaryKeyMapping, _ = queries.BindMapping(lastSyncType, lastSyncMapping, lastSyncPrimaryKeyColumns)
	lastSyncInsertCacheMut       sync.RWMutex
	lastSyncInsertCache          = make(map[string]insertCache)
	lastSyncUpdateCacheMut       sync.RWMutex
	lastSyncUpdateCache          = make(map[string]updateCache)
	lastSyncUpsertCacheMut       sync.RWMutex
	lastSyncUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lastSyncBeforeInsertHooks []LastSyncHook
var lastSyncBeforeUpdateHooks []LastSyncHook
var lastSyncBeforeDeleteHooks []LastSyncHook
var lastSyncBeforeUpsertHooks []LastSyncHook

var lastSyncAfterInsertHooks []LastSyncHook
var lastSyncAfterSelectHooks []LastSyncHook
var lastSyncAfterUpdateHooks []LastSyncHook
var lastSyncAfterDeleteHooks []LastSyncHook
var lastSyncAfterUpsertHooks []LastSyncHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LastSync) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastSyncBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LastSync) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastSyncBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LastSync) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastSyncBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LastSync) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastSyncBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LastSync) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastSyncAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LastSync) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastSyncAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LastSync) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastSyncAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LastSync) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastSyncAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LastSync) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastSyncAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLastSyncHook registers your hook function for all future operations.
func AddLastSyncHook(hookPoint boil.HookPoint, lastSyncHook LastSyncHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		lastSyncBeforeInsertHooks = append(lastSyncBeforeInsertHooks, lastSyncHook)
	case boil.BeforeUpdateHook:
		lastSyncBeforeUpdateHooks = append(lastSyncBeforeUpdateHooks, lastSyncHook)
	case boil.BeforeDeleteHook:
		lastSyncBeforeDeleteHooks = append(lastSyncBeforeDeleteHooks, lastSyncHook)
	case boil.BeforeUpsertHook:
		lastSyncBeforeUpsertHooks = append(lastSyncBeforeUpsertHooks, lastSyncHook)
	case boil.AfterInsertHook:
		lastSyncAfterInsertHooks = append(lastSyncAfterInsertHooks, lastSyncHook)
	case boil.AfterSelectHook:
		lastSyncAfterSelectHooks = append(lastSyncAfterSelectHooks, lastSyncHook)
	case boil.AfterUpdateHook:
		lastSyncAfterUpdateHooks = append(lastSyncAfterUpdateHooks, lastSyncHook)
	case boil.AfterDeleteHook:
		lastSyncAfterDeleteHooks = append(lastSyncAfterDeleteHooks, lastSyncHook)
	case boil.AfterUpsertHook:
		lastSyncAfterUpsertHooks = append(lastSyncAfterUpsertHooks, lastSyncHook)
	}
}

// One returns a single lastSync record from the query.
func (q lastSyncQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LastSync, error) {
	o := &LastSync{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for last_sync")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LastSync records from the query.
func (q lastSyncQuery) All(ctx context.Context, exec boil.ContextExecutor) (LastSyncSlice, error) {
	var o []*LastSync

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LastSyncTime slice")
	}

	if len(lastSyncAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LastSync records in the query.
func (q lastSyncQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count last_sync rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lastSyncQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if last_sync exists")
	}

	return count > 0, nil
}

// LastSyncs retrieves all the records using an executor.
func LastSyncs(mods ...qm.QueryMod) lastSyncQuery {
	mods = append(mods, qm.From("\"last_sync\""))
	return lastSyncQuery{NewQuery(mods...)}
}

// FindLastSync retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLastSync(ctx context.Context, exec boil.ContextExecutor, baseAsset string, quoteAsset string, exchange string, selectCols ...string) (*LastSync, error) {
	lastSyncObj := &LastSync{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"last_sync\" where \"base_asset\"=$1 AND \"quote_asset\"=$2 AND \"exchange\"=$3", sel,
	)

	q := queries.Raw(query, baseAsset, quoteAsset, exchange)

	err := q.Bind(ctx, exec, lastSyncObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from last_sync")
	}

	return lastSyncObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LastSync) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no last_sync provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lastSyncColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lastSyncInsertCacheMut.RLock()
	cache, cached := lastSyncInsertCache[key]
	lastSyncInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lastSyncAllColumns,
			lastSyncColumnsWithDefault,
			lastSyncColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lastSyncType, lastSyncMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lastSyncType, lastSyncMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"last_sync\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"last_sync\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into last_sync")
	}

	if !cached {
		lastSyncInsertCacheMut.Lock()
		lastSyncInsertCache[key] = cache
		lastSyncInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LastSync.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LastSync) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lastSyncUpdateCacheMut.RLock()
	cache, cached := lastSyncUpdateCache[key]
	lastSyncUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lastSyncAllColumns,
			lastSyncPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update last_sync, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"last_sync\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, lastSyncPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lastSyncType, lastSyncMapping, append(wl, lastSyncPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update last_sync row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for last_sync")
	}

	if !cached {
		lastSyncUpdateCacheMut.Lock()
		lastSyncUpdateCache[key] = cache
		lastSyncUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lastSyncQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for last_sync")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for last_sync")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LastSyncSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lastSyncPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"last_sync\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, lastSyncPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in lastSync slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all lastSync")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LastSync) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no last_sync provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lastSyncColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lastSyncUpsertCacheMut.RLock()
	cache, cached := lastSyncUpsertCache[key]
	lastSyncUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			lastSyncAllColumns,
			lastSyncColumnsWithDefault,
			lastSyncColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			lastSyncAllColumns,
			lastSyncPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert last_sync, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(lastSyncPrimaryKeyColumns))
			copy(conflict, lastSyncPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"last_sync\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(lastSyncType, lastSyncMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lastSyncType, lastSyncMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert last_sync")
	}

	if !cached {
		lastSyncUpsertCacheMut.Lock()
		lastSyncUpsertCache[key] = cache
		lastSyncUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LastSync record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LastSync) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LastSyncTime provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lastSyncPrimaryKeyMapping)
	sql := "DELETE FROM \"last_sync\" WHERE \"base_asset\"=$1 AND \"quote_asset\"=$2 AND \"exchange\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from last_sync")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for last_sync")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lastSyncQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no lastSyncQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from last_sync")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for last_sync")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LastSyncSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lastSyncBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lastSyncPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"last_sync\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lastSyncPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lastSync slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for last_sync")
	}

	if len(lastSyncAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LastSync) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLastSync(ctx, exec, o.BaseAsset, o.QuoteAsset, o.Exchange)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LastSyncSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LastSyncSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lastSyncPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"last_sync\".* FROM \"last_sync\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lastSyncPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LastSyncSlice")
	}

	*o = slice

	return nil
}

// LastSyncExists checks if the LastSync row exists.
func LastSyncExists(ctx context.Context, exec boil.ContextExecutor, baseAsset string, quoteAsset string, exchange string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"last_sync\" where \"base_asset\"=$1 AND \"quote_asset\"=$2 AND \"exchange\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, baseAsset, quoteAsset, exchange)
	}
	row := exec.QueryRowContext(ctx, sql, baseAsset, quoteAsset, exchange)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if last_sync exists")
	}

	return exists, nil
}
